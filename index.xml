<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cavemancave</title><link>https://cavemancave.github.io/</link><description>Recent content on cavemancave</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 29 Oct 2023 17:07:27 +0000</lastBuildDate><atom:link href="https://cavemancave.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>群晖NAS配置dhcpd</title><link>https://cavemancave.github.io/posts/2023-10-29-setup_dhcpd/</link><pubDate>Sun, 29 Oct 2023 17:07:27 +0000</pubDate><guid>https://cavemancave.github.io/posts/2023-10-29-setup_dhcpd/</guid><description>配置文件 Link to heading NAS创建文件夹 /file/config/dhcpd/data/dhcpd.conf, 内容如下:
option arch code 93 = unsigned integer 16; subnet 192.168.0.0 netmask 255.255.255.0 { # --- Default gateway option routers 192.168.0.1; # --- Netmask option subnet-mask 255.255.255.0; # --- Broadcast Address option broadcast-address 192.168.0.255; # --- Domain name servers, tells the clients which DNS servers to use. option domain-name-servers 144.144.144.144, 114.114.115.115, 8.8.8.8, 8.8.4.4; # --- Range range 192.168.0.100 192.168.0.200; option time-offset 0; default-lease-time 1209600; max-lease-time 1814400; # --- Tftp server next-server 192.</description></item><item><title>群晖NAS配置PXE服务器</title><link>https://cavemancave.github.io/posts/2023-10-29-setup_pxe/</link><pubDate>Sun, 29 Oct 2023 17:07:27 +0000</pubDate><guid>https://cavemancave.github.io/posts/2023-10-29-setup_pxe/</guid><description>参考 Link to heading CSDN - 两分子果糖 - 搭建 PXE 服务器（基于 Ubuntu 22.04，支持 IPv4/6 及 Legacy/UEFI）
TFTP Link to heading 控制面板-》文件服务-》高级设置-》启动TFTP服务-》根文件夹 /file/tftp
dhcpd Link to heading 用容器，参考
群晖NAS配置dhcpd
http Link to heading 参考 nginx搭建http文件下载服务
碰到的问题 Link to heading legacy启动的ubuntu live安装时无法检测到UEFI模式安装的windows系统，需要用UEFI模式启动</description></item><item><title>nginx搭建http文件下载服务</title><link>https://cavemancave.github.io/posts/2023-07-08-nginx_file_server/</link><pubDate>Sat, 08 Jul 2023 17:07:27 +0000</pubDate><guid>https://cavemancave.github.io/posts/2023-07-08-nginx_file_server/</guid><description>配置文件 Link to heading NAS创建文件夹
/home/nginx 放网站文件
/home/nginx/file 共享的文件放这里
/home/config/nginx/default.conf, 内容如下:
#/etc/nginx/conf.d/default.conf server { listen *:8119; root /nginx; location / { index index.html index.php; } location /file/ { autoindex on; } } docker映射 Link to heading 创建docker， 映射目录
/home/config/nginx/default.conf =&amp;gt; /etc/nginx/conf.d/default.conf
/home/nginx/ =&amp;gt; /nginx/
访问 Link to heading 访问 http://192.168.0.x:8119/file就可以直接下载文件了</description></item><item><title>代理折腾记录 - git proxy</title><link>https://cavemancave.github.io/posts/2023-05-19-setup_proxy_git/</link><pubDate>Fri, 19 May 2023 17:07:27 +0000</pubDate><guid>https://cavemancave.github.io/posts/2023-05-19-setup_proxy_git/</guid><description> 配置 Link to heading 需要先在本地配置启动好socks代理和http代理，我用的是trojan-go和privoxy，然后
# 配置http代理 git config --global http.proxy &amp;#34;http://127.0.0.1:8118&amp;#34; # 配置socks代理 git config --global core.gitproxy &amp;#34;socks5://127.0.0.1:1080&amp;#34; # 查看配置 git config --global -l</description></item><item><title>折腾记录-两人一机</title><link>https://cavemancave.github.io/posts/2023-05-03-all_in_one/</link><pubDate>Wed, 03 May 2023 19:06:47 +0000</pubDate><guid>https://cavemancave.github.io/posts/2023-05-03-all_in_one/</guid><description>简介 Link to heading 我经常用电脑折腾，老婆偶尔用电脑加班，买2台电脑的话，有一台会经常闲置，而且如果2个电脑配置都想高一点的话也会很贵，所以想在电脑上再开一个虚拟机给她用。第一种方案是安装ASTER软件来驱动另一个屏幕和键鼠，但是这个软件好像不更新了，原理不太清楚，也容易黑屏啥的，就没有尝试。第二种是安装PVE或者unraid系统，在其上，再安装虚拟机，将usb和显卡分表直通到不同的虚拟机中，就可以实现一机多用了，而且还可以继续安装黑群晖，OpenWrt等系统，这个方向有个专门的圈子叫All in one, 简称AIO, 尝试的人多，资料也多，所以尝试这个方向。
硬件 Link to heading 主板：华硕(ASUS)TUF B360M-PLUS GS
CPU: i5-8600K
核显：HD640
显卡：GTX 1660
内存：DDR4 2666 三根 8GB + 16GB + 16GB
硬盘：1TB(Windows) + SSD 500GB (PVE) + SSD 500GB(Ubuntu)
原来主力系统是Windows，里面通过hyperV安装ubuntu系统有时折腾用，这次新购的是1根16GB内存和500GB硬盘，这样三个系统可以独立启动。
安装过程 Link to heading 主要参考两人一机的搭建方案 和 [官方直通说明]（https://pve.proxmox.com/wiki/PCI_Passthrough），虚拟机都是按EFI模式创建的，pci直通后，primary gpu先不选，然后用console进去，更新一波驱动，然后primary gpu勾上，重启后就可以独占屏幕了。
但是windows系统只能使用独显，核显总是碰到code 43的问题，参考很多帖子还未解决，还剩dump rom的操作还未尝试。最近折腾图像识别需要用到CUDA，所以也需要独显，pve系统暂时放弃。
vi /etc/default/grub update-grub vi /etc/modules update-initramfs -u -k all dmesg |grep -e DMAR -e IOMMU -e AMD-Vi lsmod |grep vfio echo &amp;#34;options kvm ignore_msrs=1&amp;#34; &amp;gt; /etc/modprobe.</description></item><item><title>代理折腾记录 - trojan-go api</title><link>https://cavemancave.github.io/posts/2023-04-30-setup_proxy_trojan-go-api/</link><pubDate>Sun, 30 Apr 2023 17:07:27 +0000</pubDate><guid>https://cavemancave.github.io/posts/2023-04-30-setup_proxy_trojan-go-api/</guid><description>使用api Link to heading 配置 Link to heading 过程参考使用API动态管理用户
list Link to heading root@brave-cat-2:~# docker exec -it trojan-go sh -c &amp;#34;trojan-go -api-addr 127.0.0.1:10005 -api list&amp;#34; [{&amp;#34;status&amp;#34;:{&amp;#34;user&amp;#34;:{&amp;#34;hash&amp;#34;:&amp;#34;ae3d5ff7c27d9f7972104af0ce08e61b50f8a5d5519b3e3a17fe5b5a&amp;#34;},&amp;#34;traffic_total&amp;#34;:{&amp;#34;upload_traffic&amp;#34;:30032266,&amp;#34;download_traffic&amp;#34;:11098243382},&amp;#34;speed_current&amp;#34;:{},&amp;#34;speed_limit&amp;#34;:{}}}] jq Link to heading 使用jq格式化输出，第一个[会导致jq格式化出错，直接cut掉
root@brave-cat-2:~# docker exec -it trojan-go sh -c &amp;#34;trojan-go -api-addr 127.0.0.1:10005 -api list&amp;#34; |cut -c 2- |jq { &amp;#34;status&amp;#34;: { &amp;#34;user&amp;#34;: { &amp;#34;hash&amp;#34;: &amp;#34;ae3d5ff7c27d9f7972104af0ce08e61b50f8a5d5519b3e3a17fe5b5a&amp;#34; }, &amp;#34;traffic_total&amp;#34;: { &amp;#34;upload_traffic&amp;#34;: 30069318, &amp;#34;download_traffic&amp;#34;: 11134051359 }, &amp;#34;speed_current&amp;#34;: { &amp;#34;upload_speed&amp;#34;: 534, &amp;#34;download_speed&amp;#34;: 11610901 }, &amp;#34;speed_limit&amp;#34;: {} } } parse error: Unmatched &amp;#39;]&amp;#39; at line 1, column 243 单个用户 Link to heading 单个用户的输出可以直接用jq格式化</description></item><item><title>rsync备份文件到NAS上</title><link>https://cavemancave.github.io/posts/2023-03-02-backup_to_nas/</link><pubDate>Thu, 02 Mar 2023 13:07:27 +0000</pubDate><guid>https://cavemancave.github.io/posts/2023-03-02-backup_to_nas/</guid><description> 整理文件夹 Link to heading 因为Synology Photos应用将照片按日期分目录归档，所以其他的零散照片也要分文件夹整理后上传到Photos文件夹 stackexchange - move millions of files into dated folders
shopt -s nullglob for f in *.jpg *.JPG *.jpeg *.png *.mp4; do date=$(date +%F -r &amp;#34;$f&amp;#34;) y=${date:0:4} m=${date:5:2} d=${date:8:2} target=&amp;#34;$y/$m/$d/&amp;#34; mkdir -p &amp;#34;$target&amp;#34; mv &amp;#34;$f&amp;#34; &amp;#34;$target&amp;#34; done rsync上传 Link to heading 之前尝试过远程挂载NAS文件夹，在windows中直接复制粘贴过去的方式，但是经常意外中断，意外中断后，不知道文件有没有破损，也不知道之前拷贝到多少了。所以这次利用rsync增量备份，更放心。rsync是linux命令，可以在WSL中操作，我没装WSL，所以这次是用hyper-v中创建的ubuntu虚拟机。
NAS中使能rsync 控制面板-》终端机和SNMP-》启动SSH功能；控制面板-》文件服务-》rsync-》启动rsync服务 windows上共享文件夹 linux中挂载宿主机文件夹 sudo mount.cifs //192.168.0.6/Users/taishan/Pictures /home/taishan/pic -o user=taishan 查看下文件夹内容，验证下挂载成功 预运行一下 rsync -avzn /home/taishan/pic/ taishan@192.168.0.5:/volume1/photo/Photos/mi10/ |more 去掉n正式运行 rsync -avz /home/taishan/pic/ taishan@192.168.0.5:/volume1/photo/Photos/mi10/ 卸载宿主机文件夹 sudo umount /home/taishan/pic</description></item><item><title>业余无线电折腾记录</title><link>https://cavemancave.github.io/posts/2023-02-28-setup_ham_radio/</link><pubDate>Tue, 28 Feb 2023 13:07:27 +0000</pubDate><guid>https://cavemancave.github.io/posts/2023-02-28-setup_ham_radio/</guid><description>手台购买 Link to heading 浙江省申请设站时，只能申请V段144MHz, 所以购买的无线电设备必须要有这个波段的核准码，宝峰UV5R V段没有核准码，不能申请。我最后是在闲鱼购买的森海克斯8800。
申请设站 Link to heading PC登录浙江政务服务网，（手机浙里办也可以进入，但是签章的流程不知道怎么返回）。 部门服务 =》省经信厅 =》无线电台（站）设置、使用审批 =》 使用范围：国内 =》 时间：3年 出厂编号，森海克斯要拆开电池 15个工作日内 呼号是8个工作日
考试 Link to heading 小程序 业余无线电工具集
业余无线电模拟考试平台 - 浏览题库
缩略词
Q短语
业余无线电B类考试速记
2 3dB 4 6dB 8 9dB 1 0dB 2 3dB 4 6dB 5 7dB 8 9dB 10 10dB 30 kHz LF Low Frequency 300 kHz MF Medium Frequency 3 MHz HF High Frequency 30 MHz VHF Very High Frequency 300 MHz UHF Ultra High Frequency 3000 MHz 3 GHz SHF Super High Frequency 30 000 MHz 30 GHz EHF Extra High Frequency 300 000 MHz</description></item><item><title>废旧安卓折腾记录-网络摄像头</title><link>https://cavemancave.github.io/posts/2023-02-16-android_ip_camera/</link><pubDate>Thu, 16 Feb 2023 13:07:27 +0000</pubDate><guid>https://cavemancave.github.io/posts/2023-02-16-android_ip_camera/</guid><description>设备 Link to heading Xiaomi Mi 6
LineageOS 20
App Link to heading 目前为止，测试到最好用的一个App是Google Play - Astra Streaming Studio
它支持RTSP, RTMP, SRT, You Tube, Recoder 5种串流方式
本次测试使用RTSP协议，RTSP是大部分摄像头支持的格式，兼容更好。
设置步骤：右上角网络图标-》Add Service-》RTSP-&amp;gt;Name: RTSP-&amp;gt;Name: RTSP-&amp;gt;Port:5554-&amp;gt;OK-&amp;gt;右上角播放图标-》左上角info图标可以看到地址192.168.0.30:5554
本地PC安装VLC，媒体-》打开网络串流-》rtsp://192.168.0.30:5554-&amp;gt;播放
测试码率和帧率如下
Xiaomi Mi 6 LineageOS 20 Video encoder: H264 1280x720 17.2 fps Audio encoder: AAC 44kHz stereo Encoders bitrate: 2.9 Mbps / 2.4 Mbps Outgoing bandwidth: 2.9 Mbps Sent data: 54.5 Mb Duration: 2 min. 40 sec. Xiaomi Mi 10 Lite Zoom MIUI 13 Video encoder: H264 1920x1080 30.</description></item><item><title>OpenWrt折腾记录</title><link>https://cavemancave.github.io/posts/2022-12-17-openwrt/</link><pubDate>Sat, 17 Dec 2022 13:07:27 +0000</pubDate><guid>https://cavemancave.github.io/posts/2022-12-17-openwrt/</guid><description>简介 Link to heading 记录本次OpenWrt作为旁路由配置过程。
硬件是小米路由器4A千兆版，固件是OpenWrt 21.02.2，家中的网络拓扑是光纤后一个主路由负责DHCP和防火墙，客厅，主卧，书房各一个路由器负责wifi接入。从路由器都设置成中继模式，保证家中设备都在一个局域网内。
wifi同名，开启802.11r/802.11w，保证wifi可以快速漫游。
目前在NAS上长期运行着代理客户端，并向局域网提供socks和http代理，局域网内部分设备设置代理服务器为NAS地址，经NAS代理出海。
计划在其中一台从路由器上设置透明代理，供不能设置代理服务器的设备使用，并减少其他设备手动设置流程。
重置和安装LuCI界面 Link to heading 长按10秒复位按钮可以重置，重置后默认地址是192.168.1.1，root账户无密码，我安装的这个镜像无LuCI界面，需要ssh登录后安装LuCI 电脑网线连接OpenWrt的Lan口，OpenWrt的Wan口连主路由器的Lan口 ssh root@192.168.1.1 opkg update opkg install luci # Providing encryption (https) opkg install luci-ssl /etc/init.d/uhttpd restart 访问网页https://192.168.1.1，无密码成功登录 设置静态ip地址 Link to heading 查看OpenWrt的Wan口分配到的Ip地址192.168.0.12 Lan口设置静态地址为192.168.0.12，关闭DHCP Network-&amp;gt;Interfaces-&amp;gt;LAN
Protocol: Static address
IPv4 address: 192.168.0.12
DHCP Server: Ignore interface 不知道为什么设置成静态地址后，无法登录LuCI界面，怀疑是防火墙的原因。防火墙增加2条规则，允许从Lan和Wan口访问LuCI界面 Network-&amp;gt;Firewall-&amp;gt;Traffic Rules AllowWlan80 From wan, To this device, port 80 Allowlan80 From lan, To this device, port 80 主路由器静态地址分配绑定Ip地址192.</description></item><item><title>代理折腾记录 - NAS局域网代理</title><link>https://cavemancave.github.io/posts/2022-12-15-setup_proxy_nas/</link><pubDate>Thu, 15 Dec 2022 19:07:27 +0000</pubDate><guid>https://cavemancave.github.io/posts/2022-12-15-setup_proxy_nas/</guid><description> NAS局域网代理 Link to heading 局域网内部分设备无法安装trojan客户端，只能配置http或者socks代理，考虑到功耗，暂由NAS长期打开trojan客户端，再向局域网提供socks代理，其他设备设置代理服务器为NAS的IP地址，端口1080。由privoxy提供http代理，端口8118。 在NAS上新建2个文件夹和文件
/home/config/trojan-go/client.json 内容如上一节
/home/config/privoxy/config forward-socks5 / 0.0.0.0:1080 . listen-address 0.0.0.0:8118 拉起2个容器
p4gefault-trojan-go
vimagick-privoxy
拉起时使用与DockerHost相同的网络，根据Entrypoint确定默认配置文件路径，各自映射配置文件
/home/config/trojan-go/client.json =&amp;gt; /etc/trojan-go/config.json
/home/config/privoxy/config =&amp;gt; /etc/privoxy/config 局域网设备设置代理服务器为NAS 比如我的NAS地址固定为192.168.0.5
socks5 192.168.0.5 1080
http 192.168.0.5 8118 如果想让非本机设备使用代理，设置绑定地址local_addr时应该设置成0.0.0.0 最好在路由器中绑定NAS的ip地址，要不然每次NAS重启，配置都要变</description></item><item><title>代理折腾记录 - trojan-go调试</title><link>https://cavemancave.github.io/posts/2022-12-15-setup_proxy_trojan-go-debug/</link><pubDate>Thu, 15 Dec 2022 17:07:27 +0000</pubDate><guid>https://cavemancave.github.io/posts/2022-12-15-setup_proxy_trojan-go-debug/</guid><description> 优化 Link to heading 端口优化 Link to heading 可以让caddy监听1234端口，trojan-go服务端监听443端口，增加隐秘性，简化防火墙配置，不过caddy搭建的网站的访问速度会变慢。 更新geoip数据库 Link to heading trojan-go已经停止更新，release包中还是比较旧的数据库，如果有需要，可以手动下载替换。
https://github.com/v2fly/geoip/releases/latest/download/geoip.dat
https://github.com/v2fly/domain-list-community/releases/latest/download/dlc.dat geosite.dat最近版本已经变成dlc.dat，下载后需要重命名为geosite.dat 容器中替换的话，可以增加一个目录映射, - /root/trojan-go:/geo 客户端配置中router字段增加2行配置
/root/trojan-go/client.json &amp;#34;geoip&amp;#34;: &amp;#34;/geo/geoip.dat&amp;#34;, &amp;#34;geosite&amp;#34;: &amp;#34;/geo/geosite.dat&amp;#34; 调试 Link to heading 普通调试 Link to heading 测试网页的时候可以使用命令测试，不用打开浏览器 # 查看网页头信息 curl -I http://www.abc.com:80 # 下载网页 curl -L http://www.abc.com:80 查看端口占用 lsof -i :443 容器异常退出调试 Link to heading 在compose.yaml中，修改entrypoint entrypoint : - /bin/sh - /test.sh 在测试脚本test.sh中增加一条阻塞命令 tail -f /dev/null 拉起容器；进入容器；这样就可以查看文件映射结果或者手动执行entrypoint中的命令等操作 docker exec -it trojan-go sh</description></item><item><title>代理折腾记录 - trojan-go客户端</title><link>https://cavemancave.github.io/posts/2022-12-15-setup_proxy_trojan-go-client/</link><pubDate>Thu, 15 Dec 2022 16:07:27 +0000</pubDate><guid>https://cavemancave.github.io/posts/2022-12-15-setup_proxy_trojan-go-client/</guid><description>trojan-go客户端配置 Link to heading linux客户端 Link to heading 先在服务器上测试下
添加容器配置 Link to heading 在/root/compose.yaml中增加一个段落
trojan-client: image: p4gefau1t/trojan-go container_name: trojan-client network_mode: host volumes: - /root/trojan-go/client.json:/etc/trojan-go/config.json 添加客户端配置文件 Link to heading 创建/root/trojan-go/client.json，监听在1080端口。
{ &amp;#34;run_type&amp;#34;: &amp;#34;client&amp;#34;, &amp;#34;local_addr&amp;#34;: &amp;#34;0.0.0.0&amp;#34;, &amp;#34;local_port&amp;#34;: 1080, &amp;#34;remote_addr&amp;#34;: &amp;#34;www.abc.com&amp;#34;, &amp;#34;remote_port&amp;#34;: 1234, &amp;#34;password&amp;#34;: [ &amp;#34;password&amp;#34; ], &amp;#34;ssl&amp;#34;: { &amp;#34;sni&amp;#34;: &amp;#34;www.abc.com&amp;#34; }, &amp;#34;mux&amp;#34; :{ &amp;#34;enabled&amp;#34;: true } } 拉起客户端容器 Link to heading docker-compose up -d trojan-client 测试连接 Link to heading 访问 google, baidu 应该成功，查看日志没有错误</description></item><item><title>代理折腾记录 - trojan-go服务端</title><link>https://cavemancave.github.io/posts/2022-12-15-setup_proxy_trojan-go-server/</link><pubDate>Thu, 15 Dec 2022 15:07:27 +0000</pubDate><guid>https://cavemancave.github.io/posts/2022-12-15-setup_proxy_trojan-go-server/</guid><description>trojan-go服务端配置 Link to heading 添加容器配置 Link to heading /root/compose.yaml
services: trojan-go: image: p4gefau1t/trojan-go container_name: trojan-go network_mode: host volumes: - /root/trojan-go/server.json:/etc/trojan-go/config.json - /root/caddy/data/caddy/certificates/acme-v02.api.letsencrypt.org-directory:/cert 添加服务端配置文件 Link to heading 创建/root/trojan-go/server.json ，监听在端口 1234
{ &amp;#34;run_type&amp;#34;: &amp;#34;server&amp;#34;, &amp;#34;local_addr&amp;#34;: &amp;#34;0.0.0.0&amp;#34;, &amp;#34;local_port&amp;#34;: 1234, &amp;#34;remote_addr&amp;#34;: &amp;#34;www.abc.com&amp;#34;, &amp;#34;remote_port&amp;#34;: 80, &amp;#34;password&amp;#34;: [ &amp;#34;password&amp;#34; ], &amp;#34;ssl&amp;#34;: { &amp;#34;cert&amp;#34;: &amp;#34;/cert/www.abc.com/www.abc.com.crt&amp;#34;, &amp;#34;key&amp;#34;: &amp;#34;/cert/www.abc.com/www.abc.com.key&amp;#34;, &amp;#34;fallback_port&amp;#34;: 443 } } 拉起容器 Link to heading 执行 docker-compose up -d trojan-go 拉起容器 访问 https://www.abc.com:1234 应该成功打开网页 如果出错的话，可以通过 docker logs trojan-go 查看docker日志 服务自启动 Link to heading docker服务是开机自启动的，但是某个容器需要开机启动的话，需要在compose.</description></item><item><title>代理折腾记录 - caddy</title><link>https://cavemancave.github.io/posts/2022-12-15-setup_proxy_caddy/</link><pubDate>Thu, 15 Dec 2022 14:08:27 +0000</pubDate><guid>https://cavemancave.github.io/posts/2022-12-15-setup_proxy_caddy/</guid><description>caddy配置 Link to heading 添加容器 Link to heading 创建/root/caddy.yaml
services: caddy: image: caddy:2 container_name: caddy network_mode: host volumes: - /root/caddy/Caddyfile:/etc/caddy/Caddyfile - /root/www:/srv - /root/caddy/data:/data - /root/caddy/config:/config 创建需要的目录
mkdir /root/caddy/ /root/caddy/data /root/caddy/config /root/www 添加caddy配置文件 Link to heading 创建/root/caddy/Caddyfile
:80, www.abc.com { root * /srv file_server } 添加网页 Link to heading 创建/root/www/index.html
&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;Hello World&amp;lt;h1&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 启动docker Link to heading docker-compose -f /root/caddy.yaml up -d caddy 访问 http://www.</description></item><item><title>代理折腾记录 - 总</title><link>https://cavemancave.github.io/posts/2022-12-15-setup_proxy/</link><pubDate>Thu, 15 Dec 2022 13:07:27 +0000</pubDate><guid>https://cavemancave.github.io/posts/2022-12-15-setup_proxy/</guid><description>简介 Link to heading 记录本次设置代理的过程。
本次采用Trojan-go + Caddy的方案。Shadowsocks太容易识别，IP已经被封一次，Vray的自研Vmess感觉以后也会被识别，Trojan-go伪装成https网页访问，听起来伪装性更好，不过没看到如何预防流量重放。Caddy配置简单，自动申请证书也很赞。
计划服务端和客户端都使用容器，这样对环境的污染最小，备份一份compose.yaml和代理配置文件夹即可。
目前在NAS上长期运行着代理客户端，并向局域网提供socks和http代理，局域网内部分设备设置代理服务器为NAS地址，经NAS代理出海。
计划测试自动代理配置，不过听说有签名问题，待研究
代理折腾记录 - caddy
代理折腾记录 - trojan-go服务端
代理折腾记录 - trojan-go客户端
代理折腾记录 - trojan-go调试
代理折腾记录 - NAS局域网代理</description></item><item><title>制作一个两个客户端联网交互的小游戏</title><link>https://cavemancave.github.io/posts/2022-11-27-two_client_game/</link><pubDate>Sun, 27 Nov 2022 13:07:27 +0000</pubDate><guid>https://cavemancave.github.io/posts/2022-11-27-two_client_game/</guid><description>如何用面向对象设计一个程序，经典推荐？ - rufeng2000的回答 - 知乎 https://www.zhihu.com/question/36113705/answer/2405176382
目的 Link to heading 学习并实践socket编程
游戏选择 Link to heading pong
联网逻辑设计 Link to heading 客户端：循环读取键盘输入，写入到发送缓冲区，并刷新位置，读取接收缓冲区刷新对方位置。 服务器：等待2个连接，当有2个连接后，循环读取A的接收缓冲区写到B的发送缓冲区，读取B的接收缓冲写到A的发送缓冲区。
打印逻辑 Link to heading 利用clear清屏再输出，但是必须在linux上
进展 Link to heading 221128 命令行无法获取按键按下的事件，必须回车后才能拿到按键，需要切换到GUI继续测试
import java.util.Scanner; public class Pong { public int fieldLen; public int racketLen; public int racketPos; public Pong(int fieldLen, int racketLen, int racketPos) { this.fieldLen = fieldLen; this.racketLen = racketLen; this.racketPos = racketPos; } public void RacketUp() { if(this.</description></item><item><title>博客搭建记录-添加图片</title><link>https://cavemancave.github.io/posts/2022-11-18-how_to_add_picture_to_blog/</link><pubDate>Fri, 18 Nov 2022 13:07:27 +0000</pubDate><guid>https://cavemancave.github.io/posts/2022-11-18-how_to_add_picture_to_blog/</guid><description>方案选择 Link to heading 保存位置：图床，github仓库，服务器自建图床
公开图床都存在不稳定的问题，可能使用一段时间后就不再提供服务，github仓库也有断供风险，即使使用也要备份到自己服务器上，自建图床应该是比较好的选择，不过目前暂时没有时间弄，先使用上传到github仓库再备份到服务器上的方案
图片子仓库 Link to heading git历史记录中会保存删除和修改的图片文件，后期会逐渐膨胀，虽然有方法处理，不过还未研究，先建立子仓库存储，避免污染博客仓库
github新建仓库image
博客仓库中新增image目录
博客仓库添加子模块 git submodule add &amp;lt;url&amp;gt; &amp;lt;path&amp;gt;
提交
以后换服务器克隆记得要下载子模块
git clone --recurse-submodules git@github.com:cavemancave/cavemancave.github.io.git
如果忘记带参数了，可以在clone后init子仓库 git submodule update --init 如果子仓库远端更新了，需要在本地也更新下
git submodule update --recursive --remote
主仓和子仓一起更新也可以使用
git pull --recurse-submodules
配置别名
git config alias.sdiff &amp;#39;!&amp;#39;&amp;#34;git diff &amp;amp;&amp;amp; git submodule foreach &amp;#39;git diff&amp;#39;&amp;#34; git config alias.spush &amp;#39;push --recurse-submodules=on-demand&amp;#39; git config alias.supdate &amp;#39;submodule update --remote --merge&amp;#39; 引用图片 Link to heading ![img 1](/images/blog/Test.</description></item><item><title>如何将Github Pages构建结果部署到自己的服务器上</title><link>https://cavemancave.github.io/posts/2022-11-11-how_to_deploy_pages_web_to_own_server/</link><pubDate>Fri, 11 Nov 2022 13:07:27 +0000</pubDate><guid>https://cavemancave.github.io/posts/2022-11-11-how_to_deploy_pages_web_to_own_server/</guid><description>如何将github pages构建结果部署到自己的服务器上 Link to heading 简述 Link to heading github pages默认会有一个Actions: pages-build-deployment, 观察源码发现此action会执行jekyll build构建出_site目录，只要把这个目录同步到自己的服务器上，再拉起http服务，就可以在自己的服务器上看到静态网页了，同步目录使用rsync命令，因为scp或者sftp每次都会重复拷贝，比较耗时
步骤： Link to heading 服务器安装rsync 准备服务器的密钥登录 ssh-key-gen生成秘钥 ssh-copy-id user@serverIp拷贝到服务器 cat ~/.ssh/id_rsa 查看私钥 添加Secerts
项目页 -&amp;gt; Settings -&amp;gt; Security -&amp;gt; Secrets -&amp;gt; Actions -&amp;gt; New repository secret添加4个密文 DC_HOST 是服务器域名或者地址 DC_PORT 是ssh登录服务器的端口 DC_USER 是ssh登录服务器的用户名 DC_PASS 是ssh登录服务器的私钥
添加Action 参考代码 Link to heading # Sample workflow for building and deploying a Jekyll site to GitHub Pages name: Deploy Jekyll site to my own server on: # Runs on pushes targeting the default branch push: branches: [&amp;#34;main&amp;#34;] # Allows you to run this workflow manually from the Actions tab workflow_dispatch: jobs: rsync: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v3 - name: Setup Pages uses: actions/configure-pages@v2 - name: Build with Jekyll uses: actions/jekyll-build-pages@v1 with: source: .</description></item><item><title>环境准备：在WSL2上开发ESP32</title><link>https://cavemancave.github.io/posts/2022-03-26-esp32_development_on_wsl2/</link><pubDate>Sat, 26 Mar 2022 13:07:27 +0000</pubDate><guid>https://cavemancave.github.io/posts/2022-03-26-esp32_development_on_wsl2/</guid><description>记录在wsl2上编译、烧录esp32程序，准备开发环境的过程 大致分为三部分：
wsl2 使能USB/IP特性 安装cp120x驱动 USB串口使用 ESP32 Development on WSL2 Link to heading win11 wsl-5.10.60.1 have firstly support usbip feature, it can attach usb device to wsl. The offical post Connecting USB devices to WSL has a brief introduction.
Get latest kernel Link to heading Building your own USB/IP enabled WSL 2 kernel have a clear instruction. Or get latest kernel through updates by steps blow. Install Windows 11, open Windows Update – join Windows Insider Program (Beta channel) – install updates, reboot machine Windows Update – Advanced Options – check the option “Receive updates for other Microsoft products” – Back – Check for updates Reboot or shutdown WSL2 images start a new WSL2 image e.</description></item></channel></rss>